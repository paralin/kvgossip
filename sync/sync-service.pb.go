// Code generated by protoc-gen-gogo.
// source: github.com/fuserobotics/kvgossip/sync/sync-service.proto
// DO NOT EDIT!

/*
Package sync is a generated protocol buffer package.

It is generated from these files:
	github.com/fuserobotics/kvgossip/sync/sync-service.proto

It has these top-level messages:
	SyncGlobalHash
	SyncKeyHash
	SyncKey
	SyncKeyResult
	SyncSessionMessage
*/
package sync

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import tx "github.com/fuserobotics/kvgossip/tx"
import data "github.com/fuserobotics/kvgossip/data"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

// Offer our global tree hash.
type SyncGlobalHash struct {
	KvgossipVersion string `protobuf:"bytes,1,opt,name=kvgossip_version,json=kvgossipVersion,proto3" json:"kvgossip_version,omitempty"`
	GlobalTreeHash  []byte `protobuf:"bytes,2,opt,name=global_tree_hash,json=globalTreeHash,proto3" json:"global_tree_hash,omitempty"`
	HostNonce       string `protobuf:"bytes,3,opt,name=host_nonce,json=hostNonce,proto3" json:"host_nonce,omitempty"`
}

func (m *SyncGlobalHash) Reset()                    { *m = SyncGlobalHash{} }
func (m *SyncGlobalHash) String() string            { return proto.CompactTextString(m) }
func (*SyncGlobalHash) ProtoMessage()               {}
func (*SyncGlobalHash) Descriptor() ([]byte, []int) { return fileDescriptorSyncService, []int{0} }

// Offer our local hash for a key.
// Response will be a 1 in the timestamp field for agreement.
type SyncKeyHash struct {
	Key       string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Hash      []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Timestamp int64  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *SyncKeyHash) Reset()                    { *m = SyncKeyHash{} }
func (m *SyncKeyHash) String() string            { return proto.CompactTextString(m) }
func (*SyncKeyHash) ProtoMessage()               {}
func (*SyncKeyHash) Descriptor() ([]byte, []int) { return fileDescriptorSyncService, []int{1} }

// Response to SyncKeyHash disagreement.
// request_key will be set to the key if we want the peer's value.
// Otherwise, transaction will be set to OUR value.
type SyncKey struct {
	RequestKey  string          `protobuf:"bytes,1,opt,name=request_key,json=requestKey,proto3" json:"request_key,omitempty"`
	Transaction *tx.Transaction `protobuf:"bytes,2,opt,name=transaction" json:"transaction,omitempty"`
}

func (m *SyncKey) Reset()                    { *m = SyncKey{} }
func (m *SyncKey) String() string            { return proto.CompactTextString(m) }
func (*SyncKey) ProtoMessage()               {}
func (*SyncKey) Descriptor() ([]byte, []int) { return fileDescriptorSyncService, []int{2} }

func (m *SyncKey) GetTransaction() *tx.Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

// Response to SyncKey.
type SyncKeyResult struct {
	// If we are rejecting the sync, return the relevant revocations.
	Revocations []*data.SignedData `protobuf:"bytes,1,rep,name=revocations" json:"revocations,omitempty"`
	// Otherwise, just echo back the key.
	UpdatedKey string `protobuf:"bytes,2,opt,name=updated_key,json=updatedKey,proto3" json:"updated_key,omitempty"`
}

func (m *SyncKeyResult) Reset()                    { *m = SyncKeyResult{} }
func (m *SyncKeyResult) String() string            { return proto.CompactTextString(m) }
func (*SyncKeyResult) ProtoMessage()               {}
func (*SyncKeyResult) Descriptor() ([]byte, []int) { return fileDescriptorSyncService, []int{3} }

func (m *SyncKeyResult) GetRevocations() []*data.SignedData {
	if m != nil {
		return m.Revocations
	}
	return nil
}

// A message in a sync session conversation.
type SyncSessionMessage struct {
	SyncGlobalHash *SyncGlobalHash `protobuf:"bytes,1,opt,name=sync_global_hash,json=syncGlobalHash" json:"sync_global_hash,omitempty"`
	SyncKeyHash    *SyncKeyHash    `protobuf:"bytes,2,opt,name=sync_key_hash,json=syncKeyHash" json:"sync_key_hash,omitempty"`
	SyncKey        *SyncKey        `protobuf:"bytes,3,opt,name=sync_key,json=syncKey" json:"sync_key,omitempty"`
	SyncKeyResult  *SyncKeyResult  `protobuf:"bytes,4,opt,name=sync_key_result,json=syncKeyResult" json:"sync_key_result,omitempty"`
}

func (m *SyncSessionMessage) Reset()                    { *m = SyncSessionMessage{} }
func (m *SyncSessionMessage) String() string            { return proto.CompactTextString(m) }
func (*SyncSessionMessage) ProtoMessage()               {}
func (*SyncSessionMessage) Descriptor() ([]byte, []int) { return fileDescriptorSyncService, []int{4} }

func (m *SyncSessionMessage) GetSyncGlobalHash() *SyncGlobalHash {
	if m != nil {
		return m.SyncGlobalHash
	}
	return nil
}

func (m *SyncSessionMessage) GetSyncKeyHash() *SyncKeyHash {
	if m != nil {
		return m.SyncKeyHash
	}
	return nil
}

func (m *SyncSessionMessage) GetSyncKey() *SyncKey {
	if m != nil {
		return m.SyncKey
	}
	return nil
}

func (m *SyncSessionMessage) GetSyncKeyResult() *SyncKeyResult {
	if m != nil {
		return m.SyncKeyResult
	}
	return nil
}

func init() {
	proto.RegisterType((*SyncGlobalHash)(nil), "sync.SyncGlobalHash")
	proto.RegisterType((*SyncKeyHash)(nil), "sync.SyncKeyHash")
	proto.RegisterType((*SyncKey)(nil), "sync.SyncKey")
	proto.RegisterType((*SyncKeyResult)(nil), "sync.SyncKeyResult")
	proto.RegisterType((*SyncSessionMessage)(nil), "sync.SyncSessionMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for SyncService service

type SyncServiceClient interface {
	SyncSession(ctx context.Context, opts ...grpc.CallOption) (SyncService_SyncSessionClient, error)
}

type syncServiceClient struct {
	cc *grpc.ClientConn
}

func NewSyncServiceClient(cc *grpc.ClientConn) SyncServiceClient {
	return &syncServiceClient{cc}
}

func (c *syncServiceClient) SyncSession(ctx context.Context, opts ...grpc.CallOption) (SyncService_SyncSessionClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SyncService_serviceDesc.Streams[0], c.cc, "/sync.SyncService/SyncSession", opts...)
	if err != nil {
		return nil, err
	}
	x := &syncServiceSyncSessionClient{stream}
	return x, nil
}

type SyncService_SyncSessionClient interface {
	Send(*SyncSessionMessage) error
	Recv() (*SyncSessionMessage, error)
	grpc.ClientStream
}

type syncServiceSyncSessionClient struct {
	grpc.ClientStream
}

func (x *syncServiceSyncSessionClient) Send(m *SyncSessionMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *syncServiceSyncSessionClient) Recv() (*SyncSessionMessage, error) {
	m := new(SyncSessionMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for SyncService service

type SyncServiceServer interface {
	SyncSession(SyncService_SyncSessionServer) error
}

func RegisterSyncServiceServer(s *grpc.Server, srv SyncServiceServer) {
	s.RegisterService(&_SyncService_serviceDesc, srv)
}

func _SyncService_SyncSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SyncServiceServer).SyncSession(&syncServiceSyncSessionServer{stream})
}

type SyncService_SyncSessionServer interface {
	Send(*SyncSessionMessage) error
	Recv() (*SyncSessionMessage, error)
	grpc.ServerStream
}

type syncServiceSyncSessionServer struct {
	grpc.ServerStream
}

func (x *syncServiceSyncSessionServer) Send(m *SyncSessionMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *syncServiceSyncSessionServer) Recv() (*SyncSessionMessage, error) {
	m := new(SyncSessionMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SyncService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sync.SyncService",
	HandlerType: (*SyncServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SyncSession",
			Handler:       _SyncService_SyncSession_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptorSyncService,
}

var fileDescriptorSyncService = []byte{
	// 472 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x53, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0x36, 0xdb, 0xe2, 0xda, 0x17, 0xdb, 0xc6, 0xd1, 0x43, 0x28, 0x8a, 0x92, 0x53, 0x3d, 0x98,
	0xae, 0x91, 0x05, 0x41, 0xf0, 0x24, 0xac, 0x20, 0x0a, 0x4e, 0x97, 0xbd, 0x49, 0x98, 0xa6, 0x63,
	0x1a, 0xb6, 0xcd, 0xd4, 0xbc, 0x49, 0xd9, 0xde, 0xfd, 0xc5, 0xfe, 0x02, 0x67, 0x5e, 0xa6, 0x26,
	0x39, 0xc8, 0x5e, 0xd2, 0x99, 0xef, 0xbd, 0xef, 0xfb, 0x1e, 0xdf, 0x9b, 0xc2, 0xfb, 0xbc, 0xd0,
	0x9b, 0x7a, 0x15, 0x67, 0x6a, 0xb7, 0xf8, 0x59, 0xa3, 0xac, 0xd4, 0x4a, 0xe9, 0x22, 0xc3, 0xc5,
	0xed, 0x21, 0x57, 0x88, 0xc5, 0x7e, 0x81, 0xc7, 0x32, 0xa3, 0xcf, 0x1b, 0x53, 0x3d, 0x14, 0x99,
	0x8c, 0xf7, 0x95, 0xd2, 0x8a, 0x0d, 0x2d, 0x36, 0xbb, 0xbc, 0x97, 0xaf, 0xef, 0x16, 0xba, 0x12,
	0x25, 0x8a, 0x4c, 0x17, 0xaa, 0x6c, 0xc8, 0xb3, 0x8b, 0x7b, 0x69, 0x6b, 0xa1, 0x05, 0x7d, 0x1a,
	0x46, 0xf4, 0xdb, 0x83, 0xc9, 0xd2, 0x38, 0x5e, 0x6d, 0xd5, 0x4a, 0x6c, 0x3f, 0x0b, 0xdc, 0xb0,
	0xd7, 0x10, 0x9c, 0xda, 0xd3, 0x83, 0xac, 0xd0, 0xc8, 0x87, 0xde, 0x2b, 0x6f, 0x3e, 0xe2, 0xd3,
	0x13, 0x7e, 0xd3, 0xc0, 0x6c, 0x0e, 0x41, 0x4e, 0xc4, 0x54, 0x57, 0x52, 0xa6, 0x1b, 0x43, 0x0f,
	0xcf, 0x4c, 0xeb, 0x63, 0x3e, 0x69, 0xf0, 0x6b, 0x03, 0x93, 0xe8, 0x0b, 0x80, 0x8d, 0x42, 0x9d,
	0x96, 0xaa, 0xcc, 0x64, 0x38, 0x20, 0xb9, 0x91, 0x45, 0xbe, 0x59, 0x20, 0xfa, 0x0e, 0xbe, 0x9d,
	0xe2, 0x8b, 0x3c, 0x52, 0x77, 0x00, 0x83, 0x5b, 0x79, 0x74, 0xae, 0xf6, 0xc8, 0x18, 0x0c, 0x3b,
	0xea, 0x74, 0x66, 0xcf, 0x61, 0xa4, 0x8b, 0x9d, 0x44, 0x2d, 0x76, 0x7b, 0x92, 0x1c, 0xf0, 0x16,
	0x88, 0x7e, 0xc0, 0xb9, 0x93, 0x64, 0x2f, 0xc1, 0xaf, 0xe4, 0xaf, 0xda, 0x14, 0xd2, 0x56, 0x16,
	0x1c, 0x64, 0x1b, 0xde, 0x82, 0xdf, 0x09, 0x93, 0x4c, 0xfc, 0x64, 0x1a, 0xeb, 0xbb, 0xf8, 0xba,
	0x85, 0x79, 0xb7, 0x27, 0x5a, 0xc3, 0xd8, 0xc9, 0x73, 0x89, 0xf5, 0x56, 0xb3, 0xc4, 0x9a, 0x1c,
	0x54, 0x26, 0x6c, 0x19, 0x8d, 0xc9, 0xc0, 0x68, 0x04, 0x31, 0x65, 0xbd, 0x2c, 0xf2, 0x52, 0xae,
	0x3f, 0x99, 0x23, 0xef, 0x36, 0xd9, 0xc1, 0xea, 0xbd, 0xe9, 0x90, 0x6b, 0x1a, 0xec, 0xac, 0x19,
	0xcc, 0x41, 0x46, 0x3a, 0xfa, 0xe3, 0x01, 0xb3, 0x36, 0x4b, 0x89, 0x36, 0xf0, 0xaf, 0xe6, 0x47,
	0xe4, 0x92, 0x7d, 0x84, 0xc0, 0x3e, 0x93, 0xd4, 0x85, 0x4f, 0xc9, 0x78, 0x34, 0xf4, 0xb3, 0xd8,
	0x16, 0xe2, 0xfe, 0x4a, 0xf9, 0x04, 0xfb, 0x2b, 0xbe, 0x84, 0x31, 0xf1, 0x8d, 0x69, 0xbb, 0x34,
	0x3f, 0x79, 0xd2, 0x92, 0xdd, 0x26, 0xb8, 0x8f, 0x9d, 0xb5, 0xcc, 0xe1, 0xd1, 0x89, 0x46, 0x79,
	0xfb, 0xc9, 0xb8, 0xc7, 0xe0, 0xe7, 0xae, 0x9b, 0x7d, 0x80, 0xe9, 0x3f, 0x83, 0x8a, 0xf2, 0x09,
	0x87, 0x44, 0x78, 0xda, 0x27, 0x50, 0x89, 0x8f, 0xb1, 0x7b, 0x4d, 0x6e, 0x9a, 0xc7, 0xb0, 0x6c,
	0xfe, 0x17, 0xec, 0xea, 0x74, 0xa5, 0x08, 0x58, 0xd8, 0x2a, 0xf4, 0x53, 0x99, 0xfd, 0xb7, 0x12,
	0x3d, 0x98, 0x7b, 0x17, 0xde, 0xea, 0x21, 0x3d, 0xf9, 0x77, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff,
	0xe2, 0x04, 0xf4, 0xc0, 0x9d, 0x03, 0x00, 0x00,
}
