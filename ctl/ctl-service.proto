syntax = "proto3";
package ctl;

import "github.com/fuserobotics/kvgossip/data/data.proto";
import "github.com/fuserobotics/kvgossip/tx/transaction.proto";
import "github.com/fuserobotics/kvgossip/grant/grant.proto";

// Store a new grant in the DB
message PutGrantRequest {
  grant.GrantAuthorizationPool pool = 1;
}

message PutGrantResponse {
  repeated data.SignedData revocations = 1;
}

message PutRevocationRequest {
  data.SignedData revocation = 1;
}

message PutRevocationResponse {
}

// Request a pool of grants that would satisfy a request.
message BuildTransactionRequest {
  bytes entity_public_key = 1;
  string key = 2;
}

message BuildTransactionResponse {
  tx.Transaction transaction = 1;
  repeated data.SignedData revocations = 2;
  repeated data.SignedData invalid = 3;
}

message PutTransactionRequest {
  tx.Transaction transaction = 1;
}

message PutTransactionResponse {
}

message GetGrantsRequest {
}

message GetGrantsResponse {
  repeated data.SignedData grants = 1;
}

message GetKeyRequest {
  string key = 1;
}

message GetKeyResponse {
  tx.Transaction transaction = 1;
}

message SubscribeKeyVerRequest {
  string key = 1;
}

message SubscribeKeyVerResponse {
  tx.TransactionVerification verification = 1;
}

message ListKeysRequest {
  // List of patterns to match.
  // If prefixed with !, then remove any matches.
  // Evaluated in order.
  repeated string filter = 1;
  // Limit number of keys. If 0, then no limit.
  uint32 max_keys = 2;
  // Watch for new keys.
  bool watch = 3;
}

message ListKeysResponse {
  string key = 1;
  bytes hash = 2;

  ListKeysResponseState state = 3;
  enum ListKeysResponseState {
    LIST_KEYS_INITIAL_SET = 0;
    LIST_KEYS_TAIL = 1;
  }
}

service ControlService {
  rpc PutGrant(PutGrantRequest) returns (PutGrantResponse) {}
  rpc PutRevocation(PutRevocationRequest) returns (PutRevocationResponse) {}
  rpc BuildTransaction(BuildTransactionRequest) returns (BuildTransactionResponse) {}
  rpc PutTransaction(PutTransactionRequest) returns (PutTransactionResponse) {}
  rpc GetGrants(GetGrantsRequest) returns (GetGrantsResponse) {}
  rpc GetKey(GetKeyRequest) returns (GetKeyResponse) {}
  rpc SubscribeKeyVer(SubscribeKeyVerRequest) returns (stream SubscribeKeyVerResponse) {}
  rpc ListKeys(ListKeysRequest) returns (stream ListKeysResponse) {}
}
