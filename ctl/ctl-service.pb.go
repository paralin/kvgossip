// Code generated by protoc-gen-go.
// source: github.com/fuserobotics/kvgossip/ctl/ctl-service.proto
// DO NOT EDIT!

/*
Package ctl is a generated protocol buffer package.

It is generated from these files:
	github.com/fuserobotics/kvgossip/ctl/ctl-service.proto

It has these top-level messages:
	PutGrantRequest
	PutGrantResponse
	PutRevocationRequest
	PutRevocationResponse
	BuildTransactionRequest
	BuildTransactionResponse
	PutTransactionRequest
	PutTransactionResponse
	GetGrantsRequest
	GetGrantsResponse
	GetKeyRequest
	GetKeyResponse
	SubscribeKeyVerRequest
	SubscribeKeyVerResponse
*/
package ctl

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import data "github.com/fuserobotics/kvgossip/data"
import tx "github.com/fuserobotics/kvgossip/tx"
import grant "github.com/fuserobotics/kvgossip/grant"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Store a new grant in the DB
type PutGrantRequest struct {
	Pool *grant.GrantAuthorizationPool `protobuf:"bytes,1,opt,name=pool" json:"pool,omitempty"`
}

func (m *PutGrantRequest) Reset()                    { *m = PutGrantRequest{} }
func (m *PutGrantRequest) String() string            { return proto.CompactTextString(m) }
func (*PutGrantRequest) ProtoMessage()               {}
func (*PutGrantRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PutGrantRequest) GetPool() *grant.GrantAuthorizationPool {
	if m != nil {
		return m.Pool
	}
	return nil
}

type PutGrantResponse struct {
	Revocations []*data.SignedData `protobuf:"bytes,1,rep,name=revocations" json:"revocations,omitempty"`
}

func (m *PutGrantResponse) Reset()                    { *m = PutGrantResponse{} }
func (m *PutGrantResponse) String() string            { return proto.CompactTextString(m) }
func (*PutGrantResponse) ProtoMessage()               {}
func (*PutGrantResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PutGrantResponse) GetRevocations() []*data.SignedData {
	if m != nil {
		return m.Revocations
	}
	return nil
}

type PutRevocationRequest struct {
	Revocation *data.SignedData `protobuf:"bytes,1,opt,name=revocation" json:"revocation,omitempty"`
}

func (m *PutRevocationRequest) Reset()                    { *m = PutRevocationRequest{} }
func (m *PutRevocationRequest) String() string            { return proto.CompactTextString(m) }
func (*PutRevocationRequest) ProtoMessage()               {}
func (*PutRevocationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PutRevocationRequest) GetRevocation() *data.SignedData {
	if m != nil {
		return m.Revocation
	}
	return nil
}

type PutRevocationResponse struct {
}

func (m *PutRevocationResponse) Reset()                    { *m = PutRevocationResponse{} }
func (m *PutRevocationResponse) String() string            { return proto.CompactTextString(m) }
func (*PutRevocationResponse) ProtoMessage()               {}
func (*PutRevocationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// Request a pool of grants that would satisfy a request.
type BuildTransactionRequest struct {
	EntityPublicKey []byte `protobuf:"bytes,1,opt,name=entity_public_key,json=entityPublicKey,proto3" json:"entity_public_key,omitempty"`
	Key             string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *BuildTransactionRequest) Reset()                    { *m = BuildTransactionRequest{} }
func (m *BuildTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*BuildTransactionRequest) ProtoMessage()               {}
func (*BuildTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BuildTransactionRequest) GetEntityPublicKey() []byte {
	if m != nil {
		return m.EntityPublicKey
	}
	return nil
}

func (m *BuildTransactionRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type BuildTransactionResponse struct {
	Transaction *tx.Transaction    `protobuf:"bytes,1,opt,name=transaction" json:"transaction,omitempty"`
	Revocations []*data.SignedData `protobuf:"bytes,2,rep,name=revocations" json:"revocations,omitempty"`
	Invalid     []*data.SignedData `protobuf:"bytes,3,rep,name=invalid" json:"invalid,omitempty"`
}

func (m *BuildTransactionResponse) Reset()                    { *m = BuildTransactionResponse{} }
func (m *BuildTransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*BuildTransactionResponse) ProtoMessage()               {}
func (*BuildTransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *BuildTransactionResponse) GetTransaction() *tx.Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *BuildTransactionResponse) GetRevocations() []*data.SignedData {
	if m != nil {
		return m.Revocations
	}
	return nil
}

func (m *BuildTransactionResponse) GetInvalid() []*data.SignedData {
	if m != nil {
		return m.Invalid
	}
	return nil
}

type PutTransactionRequest struct {
	Transaction *tx.Transaction `protobuf:"bytes,1,opt,name=transaction" json:"transaction,omitempty"`
}

func (m *PutTransactionRequest) Reset()                    { *m = PutTransactionRequest{} }
func (m *PutTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*PutTransactionRequest) ProtoMessage()               {}
func (*PutTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PutTransactionRequest) GetTransaction() *tx.Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

type PutTransactionResponse struct {
}

func (m *PutTransactionResponse) Reset()                    { *m = PutTransactionResponse{} }
func (m *PutTransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*PutTransactionResponse) ProtoMessage()               {}
func (*PutTransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type GetGrantsRequest struct {
}

func (m *GetGrantsRequest) Reset()                    { *m = GetGrantsRequest{} }
func (m *GetGrantsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetGrantsRequest) ProtoMessage()               {}
func (*GetGrantsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type GetGrantsResponse struct {
	Grants []*data.SignedData `protobuf:"bytes,1,rep,name=grants" json:"grants,omitempty"`
}

func (m *GetGrantsResponse) Reset()                    { *m = GetGrantsResponse{} }
func (m *GetGrantsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetGrantsResponse) ProtoMessage()               {}
func (*GetGrantsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetGrantsResponse) GetGrants() []*data.SignedData {
	if m != nil {
		return m.Grants
	}
	return nil
}

type GetKeyRequest struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *GetKeyRequest) Reset()                    { *m = GetKeyRequest{} }
func (m *GetKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*GetKeyRequest) ProtoMessage()               {}
func (*GetKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetKeyRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type GetKeyResponse struct {
	Transaction *tx.Transaction `protobuf:"bytes,1,opt,name=transaction" json:"transaction,omitempty"`
}

func (m *GetKeyResponse) Reset()                    { *m = GetKeyResponse{} }
func (m *GetKeyResponse) String() string            { return proto.CompactTextString(m) }
func (*GetKeyResponse) ProtoMessage()               {}
func (*GetKeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetKeyResponse) GetTransaction() *tx.Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

type SubscribeKeyVerRequest struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *SubscribeKeyVerRequest) Reset()                    { *m = SubscribeKeyVerRequest{} }
func (m *SubscribeKeyVerRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeKeyVerRequest) ProtoMessage()               {}
func (*SubscribeKeyVerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *SubscribeKeyVerRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type SubscribeKeyVerResponse struct {
	Verification *tx.TransactionVerification `protobuf:"bytes,1,opt,name=verification" json:"verification,omitempty"`
}

func (m *SubscribeKeyVerResponse) Reset()                    { *m = SubscribeKeyVerResponse{} }
func (m *SubscribeKeyVerResponse) String() string            { return proto.CompactTextString(m) }
func (*SubscribeKeyVerResponse) ProtoMessage()               {}
func (*SubscribeKeyVerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *SubscribeKeyVerResponse) GetVerification() *tx.TransactionVerification {
	if m != nil {
		return m.Verification
	}
	return nil
}

func init() {
	proto.RegisterType((*PutGrantRequest)(nil), "ctl.PutGrantRequest")
	proto.RegisterType((*PutGrantResponse)(nil), "ctl.PutGrantResponse")
	proto.RegisterType((*PutRevocationRequest)(nil), "ctl.PutRevocationRequest")
	proto.RegisterType((*PutRevocationResponse)(nil), "ctl.PutRevocationResponse")
	proto.RegisterType((*BuildTransactionRequest)(nil), "ctl.BuildTransactionRequest")
	proto.RegisterType((*BuildTransactionResponse)(nil), "ctl.BuildTransactionResponse")
	proto.RegisterType((*PutTransactionRequest)(nil), "ctl.PutTransactionRequest")
	proto.RegisterType((*PutTransactionResponse)(nil), "ctl.PutTransactionResponse")
	proto.RegisterType((*GetGrantsRequest)(nil), "ctl.GetGrantsRequest")
	proto.RegisterType((*GetGrantsResponse)(nil), "ctl.GetGrantsResponse")
	proto.RegisterType((*GetKeyRequest)(nil), "ctl.GetKeyRequest")
	proto.RegisterType((*GetKeyResponse)(nil), "ctl.GetKeyResponse")
	proto.RegisterType((*SubscribeKeyVerRequest)(nil), "ctl.SubscribeKeyVerRequest")
	proto.RegisterType((*SubscribeKeyVerResponse)(nil), "ctl.SubscribeKeyVerResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ControlService service

type ControlServiceClient interface {
	PutGrant(ctx context.Context, in *PutGrantRequest, opts ...grpc.CallOption) (*PutGrantResponse, error)
	PutRevocation(ctx context.Context, in *PutRevocationRequest, opts ...grpc.CallOption) (*PutRevocationResponse, error)
	BuildTransaction(ctx context.Context, in *BuildTransactionRequest, opts ...grpc.CallOption) (*BuildTransactionResponse, error)
	PutTransaction(ctx context.Context, in *PutTransactionRequest, opts ...grpc.CallOption) (*PutTransactionResponse, error)
	GetGrants(ctx context.Context, in *GetGrantsRequest, opts ...grpc.CallOption) (*GetGrantsResponse, error)
	GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*GetKeyResponse, error)
	SubscribeKeyVer(ctx context.Context, in *SubscribeKeyVerRequest, opts ...grpc.CallOption) (ControlService_SubscribeKeyVerClient, error)
}

type controlServiceClient struct {
	cc *grpc.ClientConn
}

func NewControlServiceClient(cc *grpc.ClientConn) ControlServiceClient {
	return &controlServiceClient{cc}
}

func (c *controlServiceClient) PutGrant(ctx context.Context, in *PutGrantRequest, opts ...grpc.CallOption) (*PutGrantResponse, error) {
	out := new(PutGrantResponse)
	err := grpc.Invoke(ctx, "/ctl.ControlService/PutGrant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServiceClient) PutRevocation(ctx context.Context, in *PutRevocationRequest, opts ...grpc.CallOption) (*PutRevocationResponse, error) {
	out := new(PutRevocationResponse)
	err := grpc.Invoke(ctx, "/ctl.ControlService/PutRevocation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServiceClient) BuildTransaction(ctx context.Context, in *BuildTransactionRequest, opts ...grpc.CallOption) (*BuildTransactionResponse, error) {
	out := new(BuildTransactionResponse)
	err := grpc.Invoke(ctx, "/ctl.ControlService/BuildTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServiceClient) PutTransaction(ctx context.Context, in *PutTransactionRequest, opts ...grpc.CallOption) (*PutTransactionResponse, error) {
	out := new(PutTransactionResponse)
	err := grpc.Invoke(ctx, "/ctl.ControlService/PutTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServiceClient) GetGrants(ctx context.Context, in *GetGrantsRequest, opts ...grpc.CallOption) (*GetGrantsResponse, error) {
	out := new(GetGrantsResponse)
	err := grpc.Invoke(ctx, "/ctl.ControlService/GetGrants", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServiceClient) GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*GetKeyResponse, error) {
	out := new(GetKeyResponse)
	err := grpc.Invoke(ctx, "/ctl.ControlService/GetKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServiceClient) SubscribeKeyVer(ctx context.Context, in *SubscribeKeyVerRequest, opts ...grpc.CallOption) (ControlService_SubscribeKeyVerClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ControlService_serviceDesc.Streams[0], c.cc, "/ctl.ControlService/SubscribeKeyVer", opts...)
	if err != nil {
		return nil, err
	}
	x := &controlServiceSubscribeKeyVerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ControlService_SubscribeKeyVerClient interface {
	Recv() (*SubscribeKeyVerResponse, error)
	grpc.ClientStream
}

type controlServiceSubscribeKeyVerClient struct {
	grpc.ClientStream
}

func (x *controlServiceSubscribeKeyVerClient) Recv() (*SubscribeKeyVerResponse, error) {
	m := new(SubscribeKeyVerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ControlService service

type ControlServiceServer interface {
	PutGrant(context.Context, *PutGrantRequest) (*PutGrantResponse, error)
	PutRevocation(context.Context, *PutRevocationRequest) (*PutRevocationResponse, error)
	BuildTransaction(context.Context, *BuildTransactionRequest) (*BuildTransactionResponse, error)
	PutTransaction(context.Context, *PutTransactionRequest) (*PutTransactionResponse, error)
	GetGrants(context.Context, *GetGrantsRequest) (*GetGrantsResponse, error)
	GetKey(context.Context, *GetKeyRequest) (*GetKeyResponse, error)
	SubscribeKeyVer(*SubscribeKeyVerRequest, ControlService_SubscribeKeyVerServer) error
}

func RegisterControlServiceServer(s *grpc.Server, srv ControlServiceServer) {
	s.RegisterService(&_ControlService_serviceDesc, srv)
}

func _ControlService_PutGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).PutGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.ControlService/PutGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).PutGrant(ctx, req.(*PutGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlService_PutRevocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRevocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).PutRevocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.ControlService/PutRevocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).PutRevocation(ctx, req.(*PutRevocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlService_BuildTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).BuildTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.ControlService/BuildTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).BuildTransaction(ctx, req.(*BuildTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlService_PutTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).PutTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.ControlService/PutTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).PutTransaction(ctx, req.(*PutTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlService_GetGrants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGrantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).GetGrants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.ControlService/GetGrants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).GetGrants(ctx, req.(*GetGrantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlService_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctl.ControlService/GetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).GetKey(ctx, req.(*GetKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlService_SubscribeKeyVer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeKeyVerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControlServiceServer).SubscribeKeyVer(m, &controlServiceSubscribeKeyVerServer{stream})
}

type ControlService_SubscribeKeyVerServer interface {
	Send(*SubscribeKeyVerResponse) error
	grpc.ServerStream
}

type controlServiceSubscribeKeyVerServer struct {
	grpc.ServerStream
}

func (x *controlServiceSubscribeKeyVerServer) Send(m *SubscribeKeyVerResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ControlService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ctl.ControlService",
	HandlerType: (*ControlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutGrant",
			Handler:    _ControlService_PutGrant_Handler,
		},
		{
			MethodName: "PutRevocation",
			Handler:    _ControlService_PutRevocation_Handler,
		},
		{
			MethodName: "BuildTransaction",
			Handler:    _ControlService_BuildTransaction_Handler,
		},
		{
			MethodName: "PutTransaction",
			Handler:    _ControlService_PutTransaction_Handler,
		},
		{
			MethodName: "GetGrants",
			Handler:    _ControlService_GetGrants_Handler,
		},
		{
			MethodName: "GetKey",
			Handler:    _ControlService_GetKey_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeKeyVer",
			Handler:       _ControlService_SubscribeKeyVer_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/fuserobotics/kvgossip/ctl/ctl-service.proto",
}

func init() {
	proto.RegisterFile("github.com/fuserobotics/kvgossip/ctl/ctl-service.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 606 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x54, 0x41, 0x6f, 0xda, 0x4c,
	0x10, 0xfd, 0x1c, 0x3e, 0xd1, 0x66, 0x48, 0x80, 0x6c, 0x13, 0xa0, 0x4e, 0x22, 0x51, 0x9f, 0x10,
	0x52, 0x0d, 0x21, 0x6a, 0xa5, 0x4a, 0xad, 0xaa, 0x36, 0x51, 0x89, 0xca, 0x85, 0x9a, 0x2a, 0x95,
	0x7a, 0x89, 0x6c, 0xb3, 0x21, 0xab, 0xb8, 0x5e, 0xba, 0xbb, 0x46, 0xa1, 0xff, 0xa9, 0x7f, 0xb0,
	0xa7, 0x8a, 0xdd, 0xb5, 0x31, 0xc6, 0x88, 0xb6, 0x07, 0x2c, 0x34, 0xf3, 0xde, 0x9b, 0xf1, 0xcc,
	0x1b, 0xc3, 0xcb, 0x09, 0x11, 0x77, 0x91, 0x67, 0xfb, 0xf4, 0x5b, 0xe7, 0x36, 0xe2, 0x98, 0x51,
	0x8f, 0x0a, 0xe2, 0xf3, 0xce, 0xfd, 0x6c, 0x42, 0x39, 0x27, 0xd3, 0x8e, 0x2f, 0x82, 0xc5, 0xef,
	0x39, 0xc7, 0x6c, 0x46, 0x7c, 0x6c, 0x4f, 0x19, 0x15, 0x14, 0x15, 0x7c, 0x11, 0x98, 0xdd, 0xad,
	0xe4, 0xb1, 0x2b, 0x5c, 0xf9, 0x50, 0x34, 0xf3, 0xc5, 0x56, 0x86, 0x78, 0xe8, 0x08, 0xe6, 0x86,
	0xdc, 0xf5, 0x05, 0xa1, 0xa1, 0xa6, 0xf5, 0xb6, 0xd2, 0x26, 0xcc, 0x0d, 0x85, 0x7a, 0x2a, 0x8e,
	0x75, 0x09, 0x95, 0x61, 0x24, 0xfa, 0x8b, 0x88, 0x83, 0xbf, 0x47, 0x98, 0x0b, 0x74, 0x06, 0xff,
	0x4f, 0x29, 0x0d, 0x1a, 0x46, 0xd3, 0x68, 0x95, 0x7a, 0xa7, 0xb6, 0x82, 0x4b, 0xc8, 0xbb, 0x48,
	0xdc, 0x51, 0x46, 0x7e, 0xb8, 0x8b, 0xaa, 0x43, 0x4a, 0x03, 0x47, 0x42, 0xad, 0x0f, 0x50, 0x5d,
	0xaa, 0xf0, 0x29, 0x0d, 0x39, 0x46, 0x3d, 0x28, 0x31, 0x3c, 0xa3, 0xbe, 0xc4, 0xf2, 0x86, 0xd1,
	0x2c, 0xb4, 0x4a, 0xbd, 0xaa, 0x2d, 0x5f, 0x73, 0x44, 0x26, 0x21, 0x1e, 0x5f, 0xba, 0xc2, 0x75,
	0xd2, 0x20, 0xeb, 0x0a, 0x0e, 0x87, 0x91, 0x70, 0x92, 0x48, 0xdc, 0x52, 0x17, 0x60, 0x09, 0xd3,
	0x8d, 0xad, 0x4b, 0xa5, 0x30, 0x56, 0x1d, 0x8e, 0x32, 0x4a, 0xaa, 0x2d, 0xeb, 0x0b, 0xd4, 0xdf,
	0x47, 0x24, 0x18, 0x7f, 0x5e, 0x8e, 0x2f, 0xae, 0xd2, 0x86, 0x03, 0x1c, 0x0a, 0x22, 0xe6, 0x37,
	0xd3, 0xc8, 0x0b, 0x88, 0x7f, 0x73, 0x8f, 0xe7, 0xb2, 0xd8, 0x9e, 0x53, 0x51, 0x89, 0xa1, 0x8c,
	0x0f, 0xf0, 0x1c, 0x55, 0xa1, 0xb0, 0xc8, 0xee, 0x34, 0x8d, 0xd6, 0xae, 0xb3, 0xf8, 0x6b, 0xfd,
	0x34, 0xa0, 0xb1, 0xae, 0xac, 0x87, 0x71, 0x06, 0xa5, 0xd4, 0xbe, 0xf4, 0x1b, 0x54, 0x6c, 0xf1,
	0x60, 0xa7, 0xd1, 0x69, 0x4c, 0x76, 0x7e, 0x3b, 0x7f, 0x30, 0x3f, 0xd4, 0x86, 0x47, 0x24, 0x9c,
	0xb9, 0x01, 0x19, 0x37, 0x0a, 0x1b, 0xf0, 0x31, 0xc0, 0xfa, 0x28, 0x27, 0x94, 0x33, 0x86, 0xbf,
	0xef, 0xd5, 0x6a, 0x40, 0x2d, 0xab, 0xa5, 0xc7, 0x8d, 0xa0, 0xda, 0xc7, 0xca, 0x19, 0x5c, 0x17,
	0xb0, 0xde, 0xc0, 0x41, 0x2a, 0xa6, 0x27, 0xd4, 0x82, 0xa2, 0x34, 0xda, 0x66, 0xa7, 0xe8, 0xbc,
	0xf5, 0x0c, 0xf6, 0xfb, 0x58, 0x0c, 0xf0, 0x3c, 0x6e, 0x58, 0xef, 0xc2, 0x58, 0xee, 0xe2, 0x02,
	0xca, 0x31, 0xe4, 0x9f, 0x17, 0x60, 0xb5, 0xa1, 0x36, 0x8a, 0x3c, 0xee, 0x33, 0xe2, 0xe1, 0x01,
	0x9e, 0x5f, 0x63, 0xb6, 0xb9, 0xe0, 0x57, 0xa8, 0xaf, 0x61, 0x75, 0xe5, 0xb7, 0xb0, 0x37, 0xc3,
	0x8c, 0xdc, 0x92, 0x15, 0xf7, 0x1e, 0x67, 0x4a, 0x5f, 0xa7, 0x20, 0xce, 0x0a, 0xa1, 0xf7, 0xab,
	0x00, 0xe5, 0x0b, 0x1a, 0x0a, 0x46, 0x83, 0x91, 0xfa, 0xba, 0xa0, 0x57, 0xf0, 0x38, 0xbe, 0x37,
	0x74, 0x68, 0xfb, 0x22, 0xb0, 0x33, 0x47, 0x6c, 0x1e, 0x65, 0xa2, 0x7a, 0x1d, 0xff, 0xa1, 0x2b,
	0xd8, 0x5f, 0x39, 0x0c, 0xf4, 0x34, 0x46, 0xae, 0x9d, 0x9d, 0x69, 0xe6, 0xa5, 0x12, 0xa5, 0x4f,
	0x50, 0xcd, 0xfa, 0x1d, 0x9d, 0x48, 0xc6, 0x86, 0x03, 0x33, 0x4f, 0x37, 0x64, 0x13, 0xc9, 0x01,
	0x94, 0x57, 0x7d, 0x84, 0x92, 0x16, 0x72, 0xe4, 0x8e, 0x73, 0x73, 0x89, 0xd8, 0x6b, 0xd8, 0x4d,
	0x6c, 0x86, 0xd4, 0x3c, 0xb2, 0x56, 0x34, 0x6b, 0xd9, 0x70, 0xc2, 0x3e, 0x87, 0xa2, 0xb2, 0x10,
	0x42, 0x31, 0x66, 0x69, 0x39, 0xf3, 0xc9, 0x4a, 0x2c, 0x21, 0x0d, 0xa1, 0x92, 0xb1, 0x01, 0x52,
	0x4d, 0xe6, 0x1b, 0xc9, 0x3c, 0xc9, 0x4f, 0xc6, 0x7a, 0x5d, 0xc3, 0x2b, 0xca, 0xcf, 0xf4, 0xf9,
	0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x60, 0x20, 0x22, 0x5d, 0x82, 0x06, 0x00, 0x00,
}
